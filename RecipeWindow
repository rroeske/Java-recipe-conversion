package edu.tridenttech.cpt237.roeske.recipe.view;

import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import edu.tridenttech.cpt237.roeske.recipe.model.ReportRecipe;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.FlowPane;
import javafx.stage.Stage;
import javafx.util.Callback;

/**
 * RecipeWindow UI for displaying written recipe
 * Connects to ReportRecipe model class
 *
 */
public class RecipeWindow
{
	private Stage stage;
	Button closeButton = new Button("Close");
	private TableView<ReportRecipe> table = new TableView<>();
	private String name;
	private String from;
	private String to;
	private double quantity;
	private double amount;
	
	public RecipeWindow()
	{
		stage = new Stage();
		
		/**
		 * Sets up TableView
		 */
		TableColumn<ReportRecipe, String> nameCol = new TableColumn<>("Item Type");
		nameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
		TableColumn<ReportRecipe, String> fromCol = new TableColumn<>("From");
		fromCol.setCellValueFactory(new PropertyValueFactory<>("from"));
		TableColumn<ReportRecipe, String> toCol = new TableColumn<>("To");
		toCol.setCellValueFactory(new PropertyValueFactory<>("to"));
		TableColumn<ReportRecipe, Double> amountCol = new TableColumn<>("End Amount");
		amountCol.setCellValueFactory(new PropertyValueFactory<>("amount"));
		TableColumn<ReportRecipe, Double> quantCol = new TableColumn<>("Original Amount");
		quantCol.setCellValueFactory(new PropertyValueFactory<>("quantity"));
		nameCol.setMinWidth(110);
		fromCol.setMinWidth(110);
		quantCol.setMinWidth(110);
		toCol.setMinWidth(110);
		amountCol.setMinWidth(110);
		/**
		 * Formats table cell to 2-decimal doubles
		 */
		amountCol.setCellFactory(new Callback<TableColumn<ReportRecipe, Double>, TableCell<ReportRecipe, Double>>() {
			public TableCell<ReportRecipe, Double> call(TableColumn<ReportRecipe, Double> p) {
				TableCell<ReportRecipe, Double> cell = new TableCell<ReportRecipe, Double>(){
					@Override
					public void updateItem(Double item, boolean empty)
					{
						super.updateItem(item, empty);
						setText(empty ? null : getString());
						setGraphic(null);
					}//END OF Method
					private String getString()
					{
						String str = "";
						if(getItem() != null)
						{
							String getitem = getItem().toString();
							NumberFormat decimal = DecimalFormat.getInstance();
							decimal.setMinimumFractionDigits(2);
							decimal.setMaximumFractionDigits(2);
							decimal.setRoundingMode(RoundingMode.UP);
							str = decimal.format(Double.parseDouble(getitem));
						}
						else
						{
							str = "0.00";
						}//END OF if/else
						return str;
					}//END OF Method
				};
			return cell;
			}
		});//END OF Inner Class
		quantCol.setCellFactory(new Callback<TableColumn<ReportRecipe, Double>, TableCell<ReportRecipe, Double>>() {
			public TableCell<ReportRecipe, Double> call(TableColumn<ReportRecipe, Double> p) {
				TableCell<ReportRecipe, Double> cell = new TableCell<ReportRecipe, Double>(){
					@Override
					public void updateItem(Double item, boolean empty)
					{
						super.updateItem(item, empty);
						setText(empty ? null : getString());
						setGraphic(null);
					}//END OF Method
					private String getString()
					{
						String str = "";
						if(getItem() != null)
						{
							String getitem = getItem().toString();
							NumberFormat decimal = DecimalFormat.getInstance();
							decimal.setMinimumFractionDigits(2);
							decimal.setMaximumFractionDigits(2);
							decimal.setRoundingMode(RoundingMode.UP);
							str = decimal.format(Double.parseDouble(getitem));
						}
						else
						{
							str = "0.00";
						}//END OF if/else
						return str;
					}//END OF Method
				};
			return cell;
			}
		});//END OF Inner Class
		table.getColumns().add(nameCol);
		table.getColumns().add(fromCol);
		table.getColumns().add(quantCol);
		table.getColumns().add(toCol);
		table.getColumns().add(amountCol);
		
		/**
		 * Sets up stage
		 */
		FlowPane pane = new FlowPane();
		Scene scene = new Scene(pane);
		stage.setScene(scene);
		pane.getChildren().add(table);
		pane.getChildren().add(closeButton);
		stage.setWidth(570);
		stage.setTitle("Recipe");
	}//END OF Constructor
	
	/**
	 * Show method loads recipe from file, displays loaded objects in table
	 * Clears table when close button is hit
	 */
	public void show()
	{
		ReportRecipe recipe = new ReportRecipe(name, from, quantity, to, amount);
		recipe.loadItems();
		stage.show();
		for(int i = 0; i < recipe.getList().size(); i++)
		{	
			table.getItems().add(new ReportRecipe(recipe.getList().get(i).getName(), recipe.getList().get(i).getFrom(), recipe.getList().get(i).getQuantity(), recipe.getList().get(i).getTo(), recipe.getList().get(i).getAmount()));
		}
		closeButton.setOnAction(e ->
		{
			table.getItems().clear();
			stage.close();
		});
	}//END OF Method
}//END OF Class
