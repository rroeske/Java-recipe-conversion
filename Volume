package edu.tridenttech.cpt237.roeske.recipe.model;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

/**
 * Volume class runs all calculations for volume conversions
 *
 */
public class Volume implements Conversion, Comparable<Volume>
{
	private final String MASTERFILE = "VolumeConversionRate.txt";
	protected double quantity;
	protected double rate;
	protected String toType;
	protected String fromType;
	protected String itemType;
	protected double amount;
	
	/**
	 * ArrayList holds data from file as subclass objects
	 */
	ArrayList<Volume> volumes = new ArrayList<>();
	
	/**
	 * Constructor for TableView object
	 * @param item
	 * @param from
	 * @param quantity
	 * @param to
	 * @param amount
	 */
	public Volume(String item, String from, double quantity, String to, double amount)
	{
		this.itemType = item;
		this.fromType = from;
		this.quantity = quantity;
		this.toType = to;
		this.amount = amount;
	}//END OF Constructor
	
	/**
	 * Constructor
	 * @param item
	 * @param from
	 * @param rate
	 * @param to
	 */
	public Volume(String item, String from, double rate, String to)
	{
		this.itemType = item;
		this.toType = to;
		this.fromType = from;
		this.rate = rate;
	}//END OF Constructor
	
	/**
	 * Compare to method sorts loaded list alphabetically so it can be indexed
	 */
    @Override
    public int compareTo(Volume compareItem)
    {
    	if(this.itemType.compareTo(compareItem.itemType) == 0)
    	{
    		return 0;
    	}
    	else if(this.itemType.compareTo(compareItem.itemType) < 0)
    	{
    		return -1;
    	}
    	else
    	{
    		return 1;
    	}//END OF if/else

    }//END OF Method
	
    /**
     * Convert method processes conversion based on item type
     * Sends data to child classes to calculate conversion and brings data back
     */
	public void convert(String type)
	{
		if(type.equals("brownsugar"))
		{
			int index = 0;
			BrownSugar br = new BrownSugar(volumes.get(index).getItemType(), volumes.get(index).getFromType(), volumes.get(index).getRate(), volumes.get(index).getToType());
			toType = br.getTo();
			fromType = br.getFrom();
			itemType = br.getItem();
			amount = br.getAmount(quantity);
		}
		else if(type.equals("butter"))
		{
			int index = 1;
			Butter bu = new Butter(volumes.get(index).getItemType(), volumes.get(index).getFromType(), volumes.get(index).getRate(), volumes.get(index).getToType());
			toType = bu.getTo();
			fromType = bu.getFrom();
			itemType = bu.getItem();
			amount = bu.getAmount(quantity);
		}
		else if(type.equals("flour"))
		{
			int index = 2;
			Flour fl = new Flour(volumes.get(index).getItemType(), volumes.get(index).getFromType(), volumes.get(index).getRate(), volumes.get(index).getToType());
			toType = fl.getTo();
			fromType = fl.getFrom();
			itemType = fl.getItem();
			amount = fl.getAmount(quantity);
		}
		else if(type.equals("sugar"))
		{
			int index = 3;
			Sugar sg = new Sugar(volumes.get(index).getItemType(), volumes.get(index).getFromType(), volumes.get(index).getRate(), volumes.get(index).getToType());
			toType = sg.getTo();
			fromType = sg.getFrom();
			itemType = sg.getItem();
			amount = sg.getAmount(quantity);
		}
		else
		{
			System.err.println("Unknown type");
		}//END OF if/else
	}//END OF Method
	
	public void setQuantity(double quantity)
	{
		this.quantity = quantity;
	}//END OF Method
	
	/**
	 * Loads conversion data from file into array list as subclass objects
	 * Item type, measurement from, conversion rate and measurement to
	 * Catches errors NumberFormatException, ArrayIndexOutOfBoundsException, and IOException
	 * Runs sort function to alphabetize list
	 */
	public void loadItems()
	{
		int lineCount = 0;
		try
		{
			Scanner infile = new Scanner(new FileInputStream(MASTERFILE));
			
			while(infile.hasNext() == true)
			{
				String line = infile.nextLine();
				String[] list = line.split(",", 4);
				
				try
				{
					lineCount++;
					if(list[0].equals("brownsugar"))
					{
						volumes.add(new BrownSugar(list[0], list[1], Double.parseDouble(list[2]), list[3]));
					}
					else if(list[0].equals("butter"))
					{
						volumes.add(new Butter(list[0], list[1], Double.parseDouble(list[2]), list[3]));
					}
					else if(list[0].equals("flour"))
					{
						volumes.add(new Flour(list[0], list[1], Double.parseDouble(list[2]), list[3]));
					}
					else if(list[0].equals("sugar"))
					{
						volumes.add(new Sugar(list[0], list[1], Double.parseDouble(list[2]), list[3]));
					}
					else
					{
						System.err.printf("%s %d %s %s\n", "Invalid line. Line:", lineCount, "Text:", line);
					}
				}//END OF try
				catch(NumberFormatException e)
				{
					System.err.printf("%s %d %s %s\n", "Invalid line. Line:", lineCount, "Text:", line);
				}//END OF catch		
				catch(ArrayIndexOutOfBoundsException e)
				{
					System.err.printf("%s %d %s %s\n", "Invalid line. Line:", lineCount, "Text:", line);
				}//END OF catch
			}//END OF loop
			infile.close();
			Collections.sort(volumes);
		}//END OF try
		catch(IOException ex)
		{
			System.err.println("File not found");
		}//END OF catch
	}//END OF Method
	
	public String getToType()
	{
		return toType;
	}//END OF Method
	
	public String getFromType()
	{
		return fromType;
	}//END OF Method
	
	public String getItemType()
	{
		return itemType;
	}//END OF Method
	
	public double getAmount()
	{
		return amount;
	}//END OF Method
	
	public double getQuantity()
	{
		return quantity;
	}//END OF Method
	
	public double getRate()
	{
		return rate;
	}//END OF Method
}//END OF Class
